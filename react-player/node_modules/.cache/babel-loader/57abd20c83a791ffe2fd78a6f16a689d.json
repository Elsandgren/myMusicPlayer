{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elias\\\\Desktop\\\\work\\\\Developed\\\\myMusicPlayer\\\\react-player\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\"; //styles\n\nimport \"./styles/app.scss\"; //components\n\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\"; // the song data\n\nimport data from \"./util\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //ref\n  const audioRef = useRef(null); //state\n\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSonginfo] = useState({\n    currentTime: 0,\n    duration: 0\n  });\n  const [libraryStatus, setLibaryStatus] = useState(false);\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    setSonginfo({ ...songInfo,\n      currentTime: current,\n      duration\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      libraryStatus: libraryStatus,\n      setLibaryStatus: setLibaryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      audioRef: audioRef,\n      setIsPlaying: setIsPlaying,\n      isPlaying: isPlaying,\n      currentSong: currentSong,\n      setSonginfo: setSonginfo,\n      songInfo: songInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      setSongs: setSongs,\n      audioRef: audioRef,\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      isPlaying: isPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onLoadedMetadata: timeUpdateHandler,\n      onTimeUpdate: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"x/3ydYtImBv9vODNbgNhlasmJAY=\");\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Elias/Desktop/work/Developed/myMusicPlayer/react-player/src/App.js"],"names":["React","useState","useRef","Player","Song","Library","Nav","data","App","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSonginfo","currentTime","duration","libraryStatus","setLibaryStatus","timeUpdateHandler","e","current","target","audio"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,MAAzB,QAAsC,OAAtC,C,CACA;;AACA,OAAO,mBAAP,C,CACA;;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,GAAP,MAAgB,kBAAhB,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAD,CAAvB,CAFa,CAGb;;AACF,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACM,IAAI,EAAL,CAAlC;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAA+BZ,QAAQ,CAACS,KAAK,CAAC,CAAD,CAAN,CAA7C;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA2Bd,QAAQ,CAAC,KAAD,CAAzC;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC;AACvCiB,IAAAA,WAAW,EAAC,CAD2B;AAEvCC,IAAAA,QAAQ,EAAC;AAF8B,GAAD,CAAxC;AAIA,QAAM,CAACC,aAAD,EAAgBC,eAAhB,IAAmCpB,QAAQ,CAAC,KAAD,CAAjD;;AACA,QAAMqB,iBAAiB,GAAIC,CAAD,IAAO;AAC/B,UAAMC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASP,WAAzB;AACA,UAAMC,QAAQ,GAAGI,CAAC,CAACE,MAAF,CAASN,QAA1B;AACAF,IAAAA,WAAW,CAAC,EAAC,GAAGD,QAAJ;AAAcE,MAAAA,WAAW,EAAEM,OAA3B;AAAoCL,MAAAA;AAApC,KAAD,CAAX;AACD,GAJD;;AAKE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,GAAD;AAAK,MAAA,aAAa,EAAEC,aAApB;AAAmC,MAAA,eAAe,EAAEC;AAApD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,WAAW,EAAET;AAAnB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEH,QAAlB;AAA4B,MAAA,YAAY,EAAEM,YAA1C;AAAwD,MAAA,SAAS,EAAED,SAAnE;AAA8E,MAAA,WAAW,EAAEF,WAA3F;AAAwG,MAAA,WAAW,EAAEK,WAArH;AAAkI,MAAA,QAAQ,EAAED;AAA5I;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,OAAD;AAAS,MAAA,QAAQ,EAAEL,QAAnB;AAA6B,MAAA,QAAQ,EAAEF,QAAvC;AAAiD,MAAA,KAAK,EAAEC,KAAxD;AAA+D,MAAA,cAAc,EAAEG,cAA/E;AAA+F,MAAA,SAAS,EAAEC;AAA1G;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAO,MAAA,gBAAgB,EAAEQ,iBAAzB;AAA4C,MAAA,YAAY,EAAEA,iBAA1D;AAA6E,MAAA,GAAG,EAAGb,QAAnF;AAA6F,MAAA,GAAG,EAAEG,WAAW,CAACc;AAA9G;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA1BQlB,G;;KAAAA,G;AA0BR;AAED,eAAeA,GAAf","sourcesContent":["import React, {useState, useRef} from \"react\";\n//styles\nimport \"./styles/app.scss\";\n//components\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\";\n// the song data\nimport data from \"./util\";\n\nfunction App() {\n  //ref\n  const audioRef = useRef(null);\n  //state\nconst [songs, setSongs] = useState(data());\nconst [currentSong, setCurrentSong] =useState(songs[0]);\nconst [isPlaying, setIsPlaying] =useState(false);\nconst [songInfo, setSonginfo] = useState({\n  currentTime:0,\n  duration:0,\n});\nconst [libraryStatus, setLibaryStatus] = useState(false);\nconst timeUpdateHandler = (e) => {\n  const current = e.target.currentTime;\n  const duration = e.target.duration;\n  setSonginfo({...songInfo, currentTime: current, duration});\n};\n  return (\n    <div className=\"App\">\n      <Nav libraryStatus={libraryStatus} setLibaryStatus={setLibaryStatus}/>\n      <Song currentSong={currentSong}/>\n      <Player audioRef={audioRef} setIsPlaying={setIsPlaying} isPlaying={isPlaying} currentSong={currentSong} setSonginfo={setSonginfo} songInfo={songInfo} />\n      <Library setSongs={setSongs} audioRef={audioRef} songs={songs} setCurrentSong={setCurrentSong} isPlaying={isPlaying} />\n      <audio onLoadedMetadata={timeUpdateHandler} onTimeUpdate={timeUpdateHandler} ref ={audioRef} src={currentSong.audio}></audio>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}