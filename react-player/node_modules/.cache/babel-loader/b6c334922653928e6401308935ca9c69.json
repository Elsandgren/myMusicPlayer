{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elias\\\\Desktop\\\\work\\\\Developed\\\\myMusicPlayer\\\\react-player\\\\src\\\\components\\\\player.js\",\n    _s = $RefreshSig$();\n\nimport react, { useRef, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\n/* import { useState } from \"react/cjs/react.development\"; */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = _ref => {\n  _s();\n\n  let {\n    currentSong,\n    isPlaying,\n    setIsPlaying\n  } = _ref;\n  //reference\n  const audioRef = useRef(null); //eventhandlers\n\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    setSonginfo({ ...songInfo,\n      currentTime: current,\n      duration\n    });\n  };\n\n  const getTime = () => {\n    return map.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  }; //state for time\n\n\n  const [songInfo, setSonginfo] = useState({\n    currentTime: null,\n    duration: null\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Start Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"End Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-back\",\n        size: \"2x\",\n        icon: faAngleLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: playSongHandler,\n        className: \"play\",\n        size: \"2x\",\n        icon: faPlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-forward\",\n        size: \"2x\",\n        icon: faAngleRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onTimeUpdate: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Player, \"6uWY8M0OFX8KF116K1F1UZOETrE=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/Elias/Desktop/work/Developed/myMusicPlayer/react-player/src/components/player.js"],"names":["react","useRef","useState","FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","Player","currentSong","isPlaying","setIsPlaying","audioRef","playSongHandler","current","pause","play","timeUpdateHandler","e","target","currentTime","duration","setSonginfo","songInfo","getTime","map","floor","time","Math","slice","audio"],"mappings":"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","sourcesContent":["import react, {useRef, useState} from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlay, faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\r\n/* import { useState } from \"react/cjs/react.development\"; */\r\n\r\n\r\nconst Player = ({currentSong, isPlaying, setIsPlaying}) => {\r\n    //reference\r\n    const audioRef = useRef(null);\r\n    //eventhandlers\r\n    const playSongHandler = () =>{\r\n        if(isPlaying){\r\n            audioRef.current.pause();\r\n            setIsPlaying(!isPlaying);\r\n        }else{\r\n            audioRef.current.play();\r\n            setIsPlaying(!isPlaying);\r\n        }\r\n    }\r\n    const timeUpdateHandler = (e) => {\r\n        const current = e.target.currentTime;\r\n        const duration = e.target.duration;\r\n        setSonginfo({...songInfo, currentTime: current, duration});\r\n    }\r\n    const getTime = () => {\r\n        return(\r\n            map.floor(time/60)+\":\"+(\"0\" + Math.floor(time % 60)).slice(-2)\r\n        )\r\n    }\r\n    //state for time\r\n    const [songInfo, setSonginfo] = useState({\r\n        currentTime:null,\r\n        duration:null,\r\n    });\r\n    return(\r\n        <div className=\"player\">\r\n            <div className=\"time-control\">\r\n                <p>Start Time</p>\r\n                <input type=\"range\" />\r\n                <p>End Time</p>\r\n            </div>\r\n            <div className=\"play-control\">\r\n                <FontAwesomeIcon className=\"skip-back\" size=\"2x\" icon={faAngleLeft}/>\r\n                <FontAwesomeIcon onClick={playSongHandler} className=\"play\" size=\"2x\" icon={faPlay}/>\r\n                <FontAwesomeIcon className=\"skip-forward\" size=\"2x\" icon={faAngleRight}/>\r\n            </div>\r\n            <audio onTimeUpdate={timeUpdateHandler} ref ={audioRef} src={currentSong.audio}></audio>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Player;"]},"metadata":{},"sourceType":"module"}