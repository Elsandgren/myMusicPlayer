{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elias\\\\Desktop\\\\work\\\\Developed\\\\myMusicPlayer\\\\react-player\\\\src\\\\components\\\\LibrarySong.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LibrarySong = _ref => {\n  let {\n    song,\n    songs,\n    setCurrentSong,\n    id,\n    audioRef,\n    isPlaying\n  } = _ref;\n\n  const songSelectHandler = () => {\n    const selectedSong = songs.filter(state => state.id === id);\n    setCurrentSong(selectedSong[0]); //set active state\n\n    const newSongs = songs.map(song => {\n      if (song.id === id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    }); //is the song playing?\n\n    if (isPlaying) {\n      const playPromise = audioRef.current.play();\n\n      if (playPromise !== undefined) {\n        playPromise.then(audio => {\n          audioRef.current.play();\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: songSelectHandler,\n    className: `Library-song ${song.active ? \"selected\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      alt: song.name,\n      src: song.cover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: song.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_c = LibrarySong;\nexport default LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["C:/Users/Elias/Desktop/work/Developed/myMusicPlayer/react-player/src/components/LibrarySong.js"],"names":["React","LibrarySong","song","songs","setCurrentSong","id","audioRef","isPlaying","songSelectHandler","selectedSong","filter","state","newSongs","map","active","playPromise","current","play","undefined","then","audio","name","cover","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,WAAW,GAAG,QAA6D;AAAA,MAA5D;AAACC,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcC,IAAAA,cAAd;AAA8BC,IAAAA,EAA9B;AAAkCC,IAAAA,QAAlC;AAA4CC,IAAAA;AAA5C,GAA4D;;AAC7E,QAAMC,iBAAiB,GAAG,MAAM;AAC5B,UAAMC,YAAY,GAAGN,KAAK,CAACO,MAAN,CAAcC,KAAD,IAAWA,KAAK,CAACN,EAAN,KAAaA,EAArC,CAArB;AACAD,IAAAA,cAAc,CAACK,YAAY,CAAC,CAAD,CAAb,CAAd,CAF4B,CAG5B;;AACA,UAAMG,QAAQ,GAAGT,KAAK,CAACU,GAAN,CAAWX,IAAD,IAAS;AAChC,UAAGA,IAAI,CAACG,EAAL,KAAYA,EAAf,EAAkB;AACd,eAAM,EACF,GAAGH,IADD;AACOY,UAAAA,MAAM,EAAC;AADd,SAAN;AAGH,OAJD,MAIK;AACD,eAAM,EACF,GAAGZ,IADD;AACOY,UAAAA,MAAM,EAAC;AADd,SAAN;AAGH;AACJ,KAVgB,CAAjB,CAJ4B,CAe5B;;AACA,QAAGP,SAAH,EAAa;AACT,YAAMQ,WAAW,GAAGT,QAAQ,CAACU,OAAT,CAAiBC,IAAjB,EAApB;;AACA,UAAGF,WAAW,KAAKG,SAAnB,EAA6B;AACzBH,QAAAA,WAAW,CAACI,IAAZ,CAAkBC,KAAD,IAAW;AACxBd,UAAAA,QAAQ,CAACU,OAAT,CAAiBC,IAAjB;AACH,SAFD;AAGH;AACJ;AACJ,GAxBD;;AAyBA,sBACI;AAAK,IAAA,OAAO,EAAET,iBAAd;AAAiC,IAAA,SAAS,EAAG,gBAAeN,IAAI,CAACY,MAAL,GAAc,UAAd,GAA0B,EAAG,EAAzF;AAAA,4BACI;AAAK,MAAA,GAAG,EAAEZ,IAAI,CAACmB,IAAf;AAAqB,MAAA,GAAG,EAAGnB,IAAI,CAACoB;AAAhC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACA;AAAA,kBAAKpB,IAAI,CAACmB;AAAV;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAA,kBAAKnB,IAAI,CAACqB;AAAV;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAnCD;;KAAMtB,W;AAqCN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\r\n\r\nconst LibrarySong = ({song, songs, setCurrentSong, id, audioRef, isPlaying }) => {\r\n    const songSelectHandler = () => {\r\n        const selectedSong = songs.filter((state) => state.id === id);\r\n        setCurrentSong(selectedSong[0]);\r\n        //set active state\r\n        const newSongs = songs.map((song) =>{\r\n            if(song.id === id){\r\n                return{\r\n                    ...song, active:true,\r\n                }\r\n            }else{\r\n                return{\r\n                    ...song, active:false,\r\n                }\r\n            }\r\n        })\r\n        //is the song playing?\r\n        if(isPlaying){\r\n            const playPromise = audioRef.current.play();\r\n            if(playPromise !== undefined){\r\n                playPromise.then((audio) => {\r\n                    audioRef.current.play();\r\n                });\r\n            }\r\n        }\r\n    };\r\n    return(\r\n        <div onClick={songSelectHandler} className={`Library-song ${song.active ? \"selected\" :\"\"}`}>\r\n            <img alt={song.name} src= {song.cover}></img>\r\n            <div className=\"song-description\">\r\n            <h3>{song.name}</h3>\r\n            <h4>{song.artist}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LibrarySong;"]},"metadata":{},"sourceType":"module"}