{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elias\\\\Desktop\\\\work\\\\Developed\\\\myMusicPlayer\\\\react-player\\\\src\\\\components\\\\Player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from \"@fortawesome/free-solid-svg-icons\";\n/* import { useState } from \"react/cjs/react.development\"; */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = _ref => {\n  _s();\n\n  let {\n    currentSong,\n    isPlaying,\n    setIsPlaying,\n    audioRef,\n    setSonginfo,\n    songInfo,\n    songs,\n    setCurrentSong,\n    setSongs\n  } = _ref;\n  //UseEffect\n  useEffect(() => {\n    const newSongs = songs.map(song => {\n      if (song.id === currentSong.id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    setSongs(newSongs);\n  }, [currentSong]); //eventhandlers\n\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const getTime = time => {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  };\n\n  const dragHandler = e => {\n    audioRef.current.currentTime = e.target.value;\n    setSonginfo({ ...songInfo,\n      currentTime: e.target.value\n    });\n  };\n\n  const skipTrackHandler = async direction => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n\n    if (direction === \"skip-forward\") {\n      await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    }\n\n    if (direction === \"skip-back\") {\n      if ((currentIndex - 1) % songs.length === -1) {\n        setCurrentSong(songs[songs.length - 1]);\n        if (isPlaying) audioRef.current.play();\n        return;\n      }\n\n      setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n    }\n\n    if (isPlaying) audioRef.current.play();\n  }; //add styles\n\n\n  const trackAnim = {\n    transform: `translateX(${songInfo.animationPercentage}%)`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: `linear-gradient(to right, ${currentSong.color[0]},${currentSong.color[1]})`\n        },\n        className: \"track\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          min: 0,\n          max: songInfo.duration || 0,\n          value: songInfo.currentTime,\n          onChange: dragHandler,\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: trackAnim,\n          className: \"animate-track\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: songInfo.duration ? getTime(songInfo.duration) : \"0:00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: () => skipTrackHandler(\"skip-back\"),\n        className: \"skip-back\",\n        size: \"2x\",\n        icon: faAngleLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: playSongHandler,\n        className: \"play\",\n        size: \"2x\",\n        icon: isPlaying ? faPause : faPlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: () => skipTrackHandler(\"skip-forward\"),\n        className: \"skip-forward\",\n        size: \"2x\",\n        icon: faAngleRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Player, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["C:/Users/Elias/Desktop/work/Developed/myMusicPlayer/react-player/src/components/Player.js"],"names":["React","useEffect","FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","faPause","Player","currentSong","isPlaying","setIsPlaying","audioRef","setSonginfo","songInfo","songs","setCurrentSong","setSongs","newSongs","map","song","id","active","playSongHandler","current","pause","play","getTime","time","Math","floor","slice","dragHandler","e","currentTime","target","value","skipTrackHandler","direction","currentIndex","findIndex","length","trackAnim","transform","animationPercentage","background","color","duration"],"mappings":"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","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlay, faAngleLeft, faAngleRight, faPause, } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n/* import { useState } from \"react/cjs/react.development\"; */\r\n\r\n\r\nconst Player = ({currentSong, isPlaying, setIsPlaying, audioRef, setSonginfo, songInfo, songs, setCurrentSong, setSongs}) => {\r\n    //UseEffect\r\n    useEffect(()=> {\r\n        const newSongs = songs.map((song) =>{\r\n            if(song.id === currentSong.id){\r\n                return{\r\n                    ...song, active:true,\r\n                }\r\n            }else{\r\n                return{\r\n                    ...song, active:false,\r\n                }\r\n            }\r\n        });\r\n        setSongs(newSongs);\r\n    },[currentSong]);\r\n\r\n    //eventhandlers\r\n    const playSongHandler = () =>{\r\n        if(isPlaying){\r\n            audioRef.current.pause();\r\n            setIsPlaying(!isPlaying);\r\n        }else{\r\n            audioRef.current.play();\r\n            setIsPlaying(!isPlaying);\r\n        }\r\n    }\r\n    \r\n    const getTime = (time) => {\r\n        return(\r\n            Math.floor(time /60)+\":\"+(\"0\" + Math.floor(time % 60)).slice(-2)\r\n        );\r\n    };\r\n    const dragHandler= (e) => {\r\n        audioRef.current.currentTime = e.target.value;\r\n        setSonginfo({...songInfo, currentTime: e.target.value});\r\n    }\r\n    const skipTrackHandler = async (direction) => {\r\n        let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\r\n        if(direction === \"skip-forward\") {\r\n           await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\r\n        }\r\n        if(direction === \"skip-back\") {\r\n            if((currentIndex -1) % songs.length === -1){\r\n                setCurrentSong(songs[songs.length -1]);\r\n                if(isPlaying) audioRef.current.play();\r\n                return;\r\n            }\r\n            setCurrentSong(songs[(currentIndex - 1) % songs.length]);\r\n        }\r\n        if(isPlaying) audioRef.current.play();\r\n    };\r\n    //add styles\r\n    const trackAnim= {\r\n        transform: `translateX(${songInfo.animationPercentage}%)`,\r\n    };\r\n    return(\r\n        <div className=\"player\">\r\n            <div className=\"time-control\">\r\n                <p>{getTime(songInfo.currentTime)}</p>\r\n            <div style={{background: `linear-gradient(to right, ${currentSong.color[0]},${currentSong.color[1]})`}} className=\"track\">\r\n                    <input \r\n                min={0} \r\n                max={songInfo.duration || 0} \r\n                value={songInfo.currentTime}\r\n                onChange={dragHandler} \r\n                type=\"range\" />\r\n                <div style={trackAnim} className=\"animate-track\"></div>\r\n                </div>\r\n                <p>{songInfo.duration ? getTime(songInfo.duration) : \"0:00\"}</p>\r\n            </div>\r\n            <div className=\"play-control\">\r\n                <FontAwesomeIcon onClick={()=> skipTrackHandler(\"skip-back\")} className=\"skip-back\" size=\"2x\" icon={faAngleLeft}/>\r\n                <FontAwesomeIcon onClick={playSongHandler} className=\"play\" size=\"2x\" icon={isPlaying ? faPause : faPlay}/>\r\n                <FontAwesomeIcon onClick={()=> skipTrackHandler(\"skip-forward\")} className=\"skip-forward\" size=\"2x\" icon={faAngleRight}/>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Player;"]},"metadata":{},"sourceType":"module"}