{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elias\\\\Desktop\\\\work\\\\Developed\\\\myMusicPlayer\\\\react-player\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\"; //styles\n\nimport \"./styles/app.scss\"; //components\n\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\"; // the song data\n\nimport data from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //ref\n  const audioRef = useRef(null); //state\n\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSonginfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration; //calculate percentage\n\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round(roundedCurrent / roundedDuration * 100);\n    console.log(animation);\n    setSonginfo({ ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      audioRef: audioRef,\n      setIsPlaying: setIsPlaying,\n      isPlaying: isPlaying,\n      currentSong: currentSong,\n      setSonginfo: setSonginfo,\n      songInfo: songInfo,\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      setSongs: setSongs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      setSongs: setSongs,\n      audioRef: audioRef,\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      isPlaying: isPlaying,\n      libraryStatus: libraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onLoadedMetadata: timeUpdateHandler,\n      onTimeUpdate: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"tBtvtT9Obttl2Y96/KRtZLC+0rk=\");\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Elias/Desktop/work/Developed/myMusicPlayer/react-player/src/App.js"],"names":["React","useState","useRef","Player","Song","Library","Nav","data","App","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSonginfo","currentTime","duration","animationPercentage","libraryStatus","setLibraryStatus","timeUpdateHandler","e","current","target","roundedCurrent","Math","round","roundedDuration","animation","console","log","audio"],"mappings":"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","sourcesContent":["import React, {useState, useRef} from \"react\";\n//styles\nimport \"./styles/app.scss\";\n//components\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\";\n// the song data\nimport data from \"./data\";\n\nfunction App() {\n  //ref\n  const audioRef = useRef(null);\n  //state\nconst [songs, setSongs] = useState(data());\nconst [currentSong, setCurrentSong] =useState(songs[0]);\nconst [isPlaying, setIsPlaying] =useState(false);\nconst [songInfo, setSonginfo] = useState({\n  currentTime:0,\n  duration:0,\n  animationPercentage: 0,\n});\nconst [libraryStatus, setLibraryStatus] = useState(false);\nconst timeUpdateHandler = (e) => {\n  const current = e.target.currentTime;\n  const duration = e.target.duration;\n  //calculate percentage\n  const roundedCurrent = Math.round(current);\n  const roundedDuration = Math.round(duration);\n  const animation = Math.round((roundedCurrent /roundedDuration) *100);\n  console.log(animation);\n    setSonginfo({...songInfo, currentTime: current, duration, animationPercentage:animation});\n};\n  return (\n    <div className=\"App\">\n      <Nav \n      libraryStatus={libraryStatus} \n      setLibraryStatus={setLibraryStatus}/>\n      <Song \n      currentSong={currentSong}/>\n      <Player \n      audioRef={audioRef} \n      setIsPlaying={setIsPlaying} \n      isPlaying={isPlaying} \n      currentSong={currentSong} \n      setSonginfo={setSonginfo} \n      songInfo={songInfo} \n      songs={songs} \n      setCurrentSong={setCurrentSong}\n      setSongs={setSongs}\n      />\n      \n      <Library \n      setSongs={setSongs} \n      audioRef={audioRef} \n      songs={songs} \n      setCurrentSong={setCurrentSong} \n      isPlaying={isPlaying} \n      libraryStatus={libraryStatus} />\n      <audio \n      onLoadedMetadata={timeUpdateHandler} \n      onTimeUpdate={timeUpdateHandler} \n      ref ={audioRef} \n      src={currentSong.audio}></audio>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}